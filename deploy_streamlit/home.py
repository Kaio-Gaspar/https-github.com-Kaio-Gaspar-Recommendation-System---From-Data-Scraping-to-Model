import streamlit as st
import pandas as pd
import sqlite3
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Fun√ß√£o para carregar dados do banco de dados SQLite
def load_data():
    """
    Carrega os dados de dois arquivos CSV: 'df2.csv' e 'df.csv'.
    O df2 cont√©m os dados processados para c√°lculo da similaridade, enquanto o df cont√©m os dados completos dos ve√≠culos.
    """
    df2 = pd.read_csv('../recomendacao_sys/df2.csv')
    df = pd.read_csv('../recomendacao_sys/df.csv')
    return df2, df


# Fun√ß√£o para calcular a matriz de similaridade com o sistema do Jupyter
def calculate_similarity(df):
    """
    Calcula a similaridade entre os ve√≠culos utilizando as caracter√≠sticas dos ve√≠culos.
    Combina v√°rias colunas de atributos para criar uma string √∫nica para cada ve√≠culo,
    e ent√£o calcula a similaridade entre essas representa√ß√µes usando CountVectorizer e Similaridade por Cosseno.
    """
    # Combinar os atributos relevantes em uma √∫nica string para cada ve√≠culo
    df['features'] = df[['modelo', 'preco', 'marca', 'km', 'ano', 'tipo',
                         'pot_motor', 'kit_gnv', 'cor', 'combustivel', 'portas',
                         'cambio', 'direcao', 'municipio']].apply(
        lambda x: ' '.join(map(lambda v: str(v) if v is not None else 'desconhecido', x)), axis=1
    )
    
    # Vetoriza√ß√£o usando CountVectorizer
    vectorizer = CountVectorizer()
    vectorized = vectorizer.fit_transform(df['features'])
    
    # Calcular similaridade por cosseno
    similarities = cosine_similarity(vectorized)
    
    # Criar DataFrame de similaridade
    similarity_df = pd.DataFrame(similarities, columns=df['titulo'], index=df['titulo'])
    return similarity_df

# Fun√ß√£o para obter recomenda√ß√µes
def get_recommendations(input_car, similarity_df, df, num_recommendations=5):
    """
    Gera uma lista de recomenda√ß√µes de ve√≠culos semelhantes com base na similaridade calculada.
    Exclui o pr√≥prio carro selecionado das recomenda√ß√µes e retorna as informa√ß√µes dos ve√≠culos recomendados.
    """
    # Buscar os carros mais semelhantes
    recommendations = similarity_df.nlargest(num_recommendations + 1, input_car)[input_car].index
    recommendations = [car for car in recommendations if car != input_car]  # Remove o carro selecionado
    
    # Juntar com o DataFrame original para exibir mais detalhes
    recommended_cars = df[df['titulo'].isin(recommendations)][['titulo', 'preco', 'marca', 'km', 'ano', 'url']]
    return recommended_cars

# Configura√ß√£o do Streamlit
st.set_page_config(page_title="Recomenda√ß√£o de Ve√≠culos", page_icon="üöó", layout="wide")
st.title("üöó Sistema de Recomenda√ß√£o de Ve√≠culos")
st.write("Descubra os ve√≠culos mais parecidos com suas escolhas. Selecione um carro para come√ßar!")

# Adicionando uma barra lateral para navega√ß√£o
st.sidebar.title("üîß Configura√ß√µes")
st.sidebar.write("Ajuste os par√¢metros da recomenda√ß√£o ou veja informa√ß√µes adicionais.")

# Carregar dados do banco de dados
with st.spinner("Carregando dados do banco de dados..."):
    df2, df = load_data()
st.sidebar.success("Dados carregados com sucesso!")

# Mostrar algumas estat√≠sticas b√°sicas no topo
st.markdown("### üìä Estat√≠sticas dos Ve√≠culos")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric(label="Total de Ve√≠culos", value=len(df))  # Exibe o total de ve√≠culos
with col2:
    st.metric(label="Pre√ßo M√©dio (R$)", value=f"{df['preco'].mean():,.2f}")  # Exibe o pre√ßo m√©dio
with col3:
    st.metric(label="Ano M√©dio", value=int(df['ano'].mean()))  # Exibe o ano m√©dio

# Calcular matriz de similaridade
with st.spinner("Calculando similaridade entre os ve√≠culos..."):
    similarity_df = calculate_similarity(df)  # Calcula a similaridade entre os ve√≠culos
st.sidebar.success("Similaridade calculada!")

# Sele√ß√£o do carro
st.markdown("### üöò Escolha um ve√≠culo")
car_selected = st.selectbox("Escolha um an√∫ncio pelo t√≠tulo:", df['titulo'])  # O usu√°rio escolhe um ve√≠culo

# Bot√£o para gerar recomenda√ß√µes
if st.button("üîç Gerar Recomenda√ß√µes"):
    with st.spinner("Gerando recomenda√ß√µes..."):
        recommendations = get_recommendations(car_selected, similarity_df, df)  # Gera recomenda√ß√µes baseadas na sele√ß√£o
    
    # Exibe as recomenda√ß√µes ou uma mensagem caso n√£o haja
    if recommendations.empty:
        st.warning(f"N√£o h√° recomenda√ß√µes dispon√≠veis para o ve√≠culo '{car_selected}'.")
    else:
        st.markdown(f"### üìã Recomenda√ß√µes para **{car_selected}**")
        for _, row in recommendations.iterrows():
            with st.expander(row['titulo']):  # Exibe cada ve√≠culo recomendado
                col1, col2 = st.columns([2, 1])
                with col1:
                    st.write(f"**Pre√ßo:** R$ {row['preco']:,.2f}")
                    st.write(f"**Marca:** {row['marca']}")
                    st.write(f"**Ano:** {row['ano']}")
                    st.write(f"**Quilometragem:** {row['km']} km")
                st.markdown(f"[üîó Link para o an√∫ncio]({row['url']})")
else:
    st.info("Clique no bot√£o acima para gerar recomenda√ß√µes.")  # Instru√ß√£o quando o bot√£o ainda n√£o foi clicado

# Rodar o Streamlit:
# Salve este c√≥digo em um arquivo (exemplo: app.py) e execute:
# streamlit run app.py
